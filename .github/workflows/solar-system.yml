name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        strategy:
            matrix:
                nodejs_version: [18, 20]
                os: [ubuntu-latest]
                exclude:
                    - nodejs_version: 18
                      os: macos-latest
        runs-on: ${{ matrix.os }}
        # container:
        #   image: ghcr.io/node-and-packages:20
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            - name: Setup NodeJS version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.nodejs_version }}
            - name: Chace NPM dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            - name: Install dependencies
              run: npm install
            - name: Unit testing
              id: nodejs-unit-testing
              run: npm test
            - name: Archive test results
              if: always()
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Result
                path: test-results.xml

    code-coverage:
        name: Code Coverage
        container:
          image: node:18
        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            # Not needed as the Job container already contains the setup
            # - name: Setup NodeJS version - 18
            #   uses: actions/setup-node@v3
            #   with:
            #     node-version: 18
            - name: Chace NPM dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
            - name: Install dependencies
              run: npm install
            - name: Check code coverage
              continue-on-error: true
              run: npm run coverage
            - name: Archive code coverage results
              uses: actions/upload-artifact@v3
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 5

    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      permissions: 
        packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Dockerhub login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME}}
            password: ${{ secrets.DOCKERHUB_PASSWORD}}
        - name: GHCR login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Docker build for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
        - name: Docker image test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing image url using wget
            wget -q -O - 127.0.0.1:3000/live | grep live
        - name: Container registry push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reusable-deployment.yml
      secrets: 
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}

    dev-integration-test:
      name: Dev Integration test
      if: contains(github.ref, 'feature/')
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test url output using curl and jq
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo ----------
            curl https://$URL/live -s -q | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'ref/heads/main'
      needs: docker #dev-integration-test
      uses: ./.github/workflows/reusable-deployment.yml
      secrets: 
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}

    prod-integration-test:
      name: Prod Integration test
      if: github.ref == 'ref/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test url output using curl and jq
          env:
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo ----------
            curl https://$URL/live -s -q | jq -r .status | grep -i live
